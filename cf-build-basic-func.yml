AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for building reports and Lambda for generating index.html"

Parameters:
  BuildReportsBucketName:
    Type: String
    Default: "home-serve-build-reports-101"
    Description: "The name of the S3 bucket to store build reports."

Resources:
  # Lambda Function to Generate index.html
  GenerateIndexLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GenerateBuildIndex-${AWS::StackName}"
      Runtime: nodejs16.x
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const S3 = new AWS.S3();
          const BUCKET_NAME = 'home-serve-build-reports-101';
          const S3_BASE_URL = process.env.S3_BASE_URL;
          const INDEX_FILE = 'index.html';

          exports.handler = async () => {
              const listParams = { Bucket: BUCKET_NAME, Prefix: 'reports/', Delimiter: '/' };
              const s3Objects = await S3.listObjectsV2(listParams).promise();
              if (!s3Objects.Contents && !s3Objects.CommonPrefixes) {
                return {
                    statusCode: 200,
                    headers: { 'Content-Type': 'text/html' },
                    body: '<h1>Reports</h1><p>No reports found.</p>'
                };
              }
              const builds = s3Objects?.CommonPrefixes?.map(obj => obj.Prefix.split('/')[1])?.reverse();
        
              let html = `<!DOCTYPE html>
              <html lang="en">
              <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Build Reports</title>
              <style>
              body {
                font-family: Arial, sans-serif; /* Standard Bank often uses Arial */
                line-height: 1.6;
                margin: 20px;
                color: #333; /* Dark gray text for good contrast */
              }

              h1 {
                  color: #004488; /* Standard Bank blue (adjust if needed) */
                  margin-bottom: 20px;
              }

              table {
                  width: 100%;
                  border-collapse: collapse;
                  margin-top: 20px;
                  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
              }

              th, td {
                  padding: 12px 15px;
                  text-align: left;
                  border-bottom: 1px solid #ddd; 
              }

              th {
                  background-color: #f5f5f5;
                  font-weight: bold;
              }

              tr:hover {
                  background-color: #f9f9f9; /* Slightly darker gray on hover */
              }

              a {
                  color: #007bff; /* Standard blue link color */
                  text-decoration: none;
              }

              a:hover {
                  text-decoration: underline;
              }
              </style>
            </head>
            <body>`;

            html += `<h1>Build Reports</h1>`;
            html += `<table>`;
            html += `<thead><tr><th>Build ID</th><th>Unit Test Reports</th><th>E2E Test Reports</th></tr></thead>`; // Added <thead> for better semantics
            html += `<tbody>`; 
            builds.forEach(build => {
              html += `<tr>`;
              html += `<td>${build}</td>`;
              html += `<td><a href="${S3_BASE_URL}/reports/${build}/unit-tests/dashboard/unit-tests/index.html" target="_blank" rel="noopener noreferrer">Unit Test Reports</a></td>`; // Added target and rel for security
              html += `<td><a href="${S3_BASE_URL}/reports/${build}/e2e/dashboard/e2e/index.html" target="_blank" rel="noopener noreferrer">E2E Test Reports</a></td>`; // Added target and rel for security
              html += `</tr>`;
            });
            html += `</tbody>`;
            html += `</table></body></html>`;

            await S3.putObject({
              Bucket: BUCKET_NAME,
              Key: INDEX_FILE,
              Body: html,
              ContentType: 'text/html',
            }).promise();

            return { statusCode: 200, body: 'Index generated successfully.' };
          };
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: $BUCKET_NAME
          S3_BASE_URL: !Sub "http://home-serve-build-reports-101.s3-website-us-east-1.amazonaws.com"
      Role: !GetAtt GenerateIndexLambdaRole.Arn

  # IAM Role for Lambda
  GenerateIndexLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: GenerateIndexLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${BuildReportsBucketName}"
                  - !Sub "arn:aws:s3:::${BuildReportsBucketName}/*"

Outputs:
  BuildReportsLambda:
    Value: !GetAtt "GenerateIndexLambda.Arn"
    Description: "The URL of the S3 bucket hosting the build reports."
